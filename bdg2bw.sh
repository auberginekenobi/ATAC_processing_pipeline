#!/bin/bash

#############################
### Default UGER Requests ###
#############################

# Memory per core
#$ -l h_vmem=8G

# Runtime
#$ -l h_rt=00:45:00

# Output
#$ -j y
#$ -cwd
######################
### Dotkit section ###
######################

# This is required to use dotkits inside scripts
source /broad/software/scripts/useuse

# Use your dotkit
reuse BEDTools

##################
### Run script ###
##################

source $HOME/.my.bashrc

# Convert a bedgraph (such as that generated by macs2) to bigwig
# Adapted from @taoliu at https://gist.github.com/taoliu/2469050

# $1 The bdg file.
# $2 Original bam file the bdg came from
# $3 [optional]. Uses b37 otherwise. A chrom.sizes or .genome file containing chromosome sizes.
# Example usage:
# 

F=$1
B=$2
G=${3:-$ATAC/genomes/human.b37.genome}

echo "Converting $1 to bigwig..."

O=${F/bdg/bw}

# Check if flagstat exists
FLAGSTAT=${B/bam/flagstat}
if [ ! -f ${FLAGSTAT} ]; then
	echo "Creating flagstat ${FLAGSTAT}..."
	samtools flagstat ${B} > ${FLAGSTAT}
fi

# Read flagstat
D="$(awk 'FNR>6 {print $1; exit}' $FLAGSTAT)"
if [ $D == 0 ]; then
	echo "Detected single-end bam from flagstat..."
	D="$(awk '{print $1; exit}' $FLAGSTAT)"
else
	echo "Detected paired-end bam from flagstat..."
fi
echo "From flagstat: $D reads."

# Scale bedgraph
SF="$(echo "scale=5;20000000/${D}" | bc)"
echo "Scale factor ${SF}"
source activate py2
macs2 bdgopt -i ${F} -m multiply -p ${SF} -o ${F}.scale
echo "Scaling bedgraph to 20M read depth done"

bedtools slop -i ${F}.scale -g ${G} -b 0 | bedClip stdin ${G} ${F}.scale.clip
echo "Slopping and clipping done."

LC_COLLATE=C sort -S 7G -k1,1 -k2,2n ${F}.scale.clip > ${F}.scale.clip.sort
echo "Sorting done."

bedGraphToBigWig ${F}.scale.clip.sort ${G} ${O}
echo "Conversion done."

rm -f ${F}.scale ${F}.scale.clip ${F}.scale.clip.sort
echo "Removing files done."
